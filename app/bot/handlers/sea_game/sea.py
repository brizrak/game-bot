import random
from typing import List, Tuple
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command


from app.bot.handlers.states import GameStates

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM (–∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π)
router = Router()


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–≥—Ä—ã
EMPTY_CELL = '‚¨úÔ∏è'  # –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
SHIP_CELL = 'üü©'  # –ö–ª–µ—Ç–∫–∞ —Å –∫–æ—Ä–∞–±–ª–µ–º
HIT_CELL = '‚ùå'  # –ö–ª–µ—Ç–∫–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –ø–æ–ø–∞–ª–∏
MISS_CELL = 'üåÄ'  # –ö–ª–µ—Ç–∫–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å


# –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è
class Ship:
    def __init__(self, size: int, coordinates: List[Tuple[int, int]]):
        self.size = size  # –†–∞–∑–º–µ—Ä –∫–æ—Ä–∞–±–ª—è
        self.coordinates = coordinates  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä–∞–±–ª—è
        self.hit_count = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π –ø–æ –∫–æ—Ä–∞–±–ª—é

    def is_sunk(self) -> bool:
        return self.hit_count >= self.size  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Ç–æ–ø–ª–µ–Ω –ª–∏ –∫–æ—Ä–∞–±–ª—å

    def get_status(self):
        if self.is_sunk():
            return "–£–Ω–∏—á—Ç–æ–∂–µ–Ω"  # –ï—Å–ª–∏ –ø–æ—Ç–æ–ø–ª–µ–Ω
        elif self.hit_count > 0:
            return "–†–∞–Ω–µ–Ω"  # –ï—Å–ª–∏ —Ä–∞–Ω–µ–Ω
        else:
            return "–¶–µ–ª"  # –ï—Å–ª–∏ —Ü–µ–ª


# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
class SeaBattle:
    def __init__(self):
        self.player_board = self.create_board()  # –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞ –∏–≥—Ä–æ–∫–∞
        self.enemy_board = self.create_board()  # –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        self.ships = {'4': 1, '3': 2, '2': 3, '1': 4}  # –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ—Ä–∞–±–ªe–π —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        self.player_ships = []  # –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∞–±–ªe–π –∏–≥—Ä–æ–∫–∞
        self.enemy_ships = []  # –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∞–±–ªe–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        self.place_ships(self.player_board, self.player_ships)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–æ—Ä–∞–±–ª–∏ –∏–≥—Ä–æ–∫–∞
        self.place_ships(self.enemy_board, self.enemy_ships)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        self.enemy_shots = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ –≤—Ä–∞–≥–∞

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏
    @staticmethod
    def create_board():
        return [[EMPTY_CELL for _ in range(10)] for _ in range(10)]  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏ 10x10

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è
    def can_place_ship(self, board, x, y, ship_size, orientation):
        if orientation == 'H':  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
            if y + ship_size > len(board[0]):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å–∫–∏
                return False
            for i in range(ship_size):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤ –∫–ª–µ—Ç–∫–µ –Ω–µ—Ç –∫–æ—Ä–∞–±–ª—è –∏ —Ä—è–¥–æ–º –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∫–æ—Ä–∞–±–ªe–π
                if board[x][y + i] != EMPTY_CELL and board[x][y + i] != MISS_CELL or \
                        (x > 0 and board[x - 1][y + i] != EMPTY_CELL and board[x - 1][y + i] != MISS_CELL) or \
                        (x < len(board) - 1 and board[x + 1][y + i] != EMPTY_CELL and board[x + 1][
                            y + i] != MISS_CELL) or \
                        (y + i > 0 and board[x][y + i - 1] != EMPTY_CELL and board[x][y + i - 1] != MISS_CELL) or \
                        (y + i < len(board[0]) - 1 and board[x][y + i + 1] != EMPTY_CELL and board[x][
                            y + i + 1] != MISS_CELL) or \
                        (x > 0 and y + i > 0 and board[x - 1][y + i - 1] != EMPTY_CELL and board[x - 1][
                            y + i - 1] != MISS_CELL) or \
                        (x > 0 and y + i < len(board[0]) - 1 and board[x - 1][y + i + 1] != EMPTY_CELL and board[x - 1][
                            y + i + 1] != MISS_CELL) or \
                        (x < len(board) - 1 and y + i > 0 and board[x + 1][y + i - 1] != EMPTY_CELL and board[x + 1][
                            y + i - 1] != MISS_CELL) or \
                        (x < len(board) - 1 and y + i < len(board[0]) - 1 and board[x + 1][y + i + 1] != EMPTY_CELL and
                         board[x + 1][y + i + 1] != MISS_CELL):
                    return False

        else:  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
            if x + ship_size > len(board):
                return False
            for i in range(ship_size):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤ –∫–ª–µ—Ç–∫–µ –Ω–µ—Ç –∫–æ—Ä–∞–±–ª—è –∏ —Ä—è–¥–æ–º –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∫–æ—Ä–∞–±–ªe–π
                if board[x + i][y] != EMPTY_CELL and board[x + i][y] != MISS_CELL or \
                        (y > 0 and board[x + i][y - 1] != EMPTY_CELL and board[x + i][y - 1] != MISS_CELL) or \
                        (y < len(board[0]) - 1 and board[x + i][y + 1] != EMPTY_CELL and board[x + i][
                            y + 1] != MISS_CELL) or \
                        (x + i > 0 and board[x + i - 1][y] != EMPTY_CELL and board[x + i - 1][y] != MISS_CELL) or \
                        (x + i < len(board) - 1 and board[x + i + 1][y] != EMPTY_CELL and board[x + i + 1][
                            y] != MISS_CELL) or \
                        (x + i > 0 and y > 0 and board[x + i - 1][y - 1] != EMPTY_CELL and board[x + i - 1][
                            y - 1] != MISS_CELL) or \
                        (x + i > 0 and y < len(board[0]) - 1 and board[x + i - 1][y + 1] != EMPTY_CELL and
                         board[x + i - 1][y + 1] != MISS_CELL) or \
                        (x + i < len(board) - 1 and y > 0 and board[x + i + 1][y - 1] != EMPTY_CELL and
                         board[x + i + 1][y - 1] != MISS_CELL) or \
                        (x + i < len(board) - 1 and y < len(board[0]) - 1 and board[x + i + 1][y + 1] != EMPTY_CELL and
                         board[x + i + 1][y + 1] != MISS_CELL):
                    return False
        return True

    def place_ships(self, board, ship_list):
        for ship_size, count in self.ships.items():
            for _ in range(count):
                placed = False
                while not placed:
                    orientation = random.choice(['H', 'V'])  # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
                    if orientation == 'H':  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
                        x = random.randint(0, 9)
                        y = random.randint(0, 10 - int(ship_size))
                    else:  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
                        x = random.randint(0, 10 - int(ship_size))
                        y = random.randint(0, 9)
                    if self.can_place_ship(board, x, y, int(ship_size), orientation):
                        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è –Ω–∞ –¥–æ—Å–∫–µ
                        coordinates = []
                        for i in range(int(ship_size)):
                            if orientation == 'H':
                                board[x][y + i] = SHIP_CELL
                                coordinates.append((x, y + i))
                            else:
                                board[x + i][y] = SHIP_CELL
                                coordinates.append((x + i, y))
                        ship_list.append(Ship(int(ship_size), coordinates))
                        placed = True

    @staticmethod
    def board_to_str(board, hide_ships=False):
        header = "     "
        for i in range(10):
            if i % 3 == 0:
                header += f"{chr(65 + i)} "  # –û–¥–∏–Ω –ø—Ä–æ–±–µ–ª
            else:
                header += f"{chr(65 + i)}  "  # –î–≤–∞ –ø—Ä–æ–±–µ–ª–∞
        header += "\n"
        rows = []
        for i, row in enumerate(board):
            cells = [cell if not hide_ships or cell != SHIP_CELL else EMPTY_CELL for cell in row]
            rows.append(f"{i + 1:2}  " + "".join(cells))
        return header + "\n".join(rows)

    async def display_boards(self, message: Message):
        player_str = "–í–∞—à–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ:\n" + self.board_to_str(self.player_board)
        enemy_str = "–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n" + self.board_to_str(self.enemy_board, hide_ships=True)
        await message.answer(f"<pre>{player_str}</pre>\n<pre>{enemy_str}</pre>", parse_mode="HTML")

    def mark_surrounding_cells(self, board, ship):
        surrounding_cells = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –∫–ª–µ—Ç–æ–∫
        for x, y in ship.coordinates:
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –æ–∫—Ä—É–∂–∞—é—â–∏–º –∫–ª–µ—Ç–∫–∞–º
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (-1, 1), (1, -1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < 10 and 0 <= ny < 10:
                    surrounding_cells.add((nx, ny))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫—Ä—É–∂–∞—é—â–∏–µ –∫–ª–µ—Ç–∫–∏
        for x, y in surrounding_cells:
            if board[x][y] == EMPTY_CELL:
                board[x][y] = MISS_CELL  # –ü–æ–º–µ—á–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥ –ø–æ—Ç–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è

    def shoot(self, target_board, ships, move, user_id):
        try:
            x = int(move[1:]) - 1  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã x
            y = ord(move[0]) - ord('A')  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã y

            if target_board[x][y] == SHIP_CELL:  # –ï—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –≤ –∫–æ—Ä–∞–±–ª—å
                target_board[x][y] = HIT_CELL  # –ü–æ–º–µ—á–∞–µ–º –∫–ª–µ—Ç–∫—É –∫–∞–∫ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
                hit_ship = None
                for ship in ships:  # –ü–æ–∏—Å–∫ –∫–æ—Ä–∞–±–ª—è, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–∞–ª–∏
                    if (x, y) in ship.coordinates:
                        ship.hit_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π –ø–æ –∫–æ—Ä–∞–±–ª—é
                        hit_ship = ship
                        if ship.is_sunk():
                            self.mark_surrounding_cells(target_board,
                                                        ship)  # –ü–æ–º–µ—á–∞–µ–º –æ–∫—Ä—É–∂–∞—é—â–∏–µ –∫–ª–µ—Ç–∫–∏, –µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –ø–æ—Ç–æ–ø–ª–µ–Ω
                            return True, f"–í—ã –ø–æ—Ç–æ–ø–∏–ª–∏ –∫–æ—Ä–∞–±–ª—å –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö {move}!"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –ø–æ—Ç–æ–ø–ª–µ–Ω
                        else:
                            return True, f"–í—ã —Ä–∞–Ω–∏–ª–∏ –∫–æ—Ä–∞–±–ª—å –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö {move}!"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –≤ —Ä–∞–Ω–µ–Ω—ã–π –∫–æ—Ä–∞–±–ª—å

            elif target_board[x][y] == EMPTY_CELL:  # –ï—Å–ª–∏ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å
                target_board[x][y] = MISS_CELL  # –ü–æ–º–µ—á–∞–µ–º –∫–ª–µ—Ç–∫—É –∫–∞–∫ –ø—Ä–æ–º–∞—Ö
                return False, f"–í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö {move}!"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, –µ—Å–ª–∏ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å
            else:
                return "–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É.", "–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É."  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ç—Ä–µ–ª—è–ª–∏ –≤ –∫–ª–µ—Ç–∫—É —Ä–∞–Ω–µ–µ
        except (ValueError, IndexError):
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, A1 –∏–ª–∏ J10).", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, A1 –∏–ª–∏ J10)."  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π

    def check_winner(self, ships):
        return all(ship.is_sunk() for ship in ships)  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ –∫–æ—Ä–∞–±–ª–∏ –ø–æ—Ç–æ–ø–ª–µ–Ω—ã

    def add_surrounding_shots(self, x, y):
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –∫–ª–µ—Ç–æ–∫
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 10 and 0 <= ny < 10 and self.player_board[nx][ny] not in [HIT_CELL, MISS_CELL]:
                self.enemy_shots.append((nx, ny))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫—Ä—É–∂–∞—é—â–∏–µ –∫–ª–µ—Ç–∫–∏ –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞

    def check_for_adjacent_L(self, x, y):
        directions = [
            (0, 1), (0, -1), (1, 0), (-1, 0),
            (1, 1), (1, -1), (-1, 1), (-1, -1)
        ]  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –∫–ª–µ—Ç–æ–∫
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 10 and 0 <= ny < 10 and self.player_board[nx][ny] == EMPTY_CELL:
                return nx, ny  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É —Ä—è–¥–æ–º, –µ—Å–ª–∏ –µ—Å—Ç—å
        return None

    def enemy_shoot(self, target_board, ships):
        while True:
            if self.enemy_shots:
                x, y = self.enemy_shots.pop(0)  # –ë–µ—Ä—ë–º –≤—ã—Å—Ç—Ä–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞
            else:
                x, y = random.randint(0, 9), random.randint(0, 9)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª
            if target_board[x][y] == EMPTY_CELL:
                target_board[x][y] = MISS_CELL  # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ–º–∞—Ö
                return False, f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö {chr(y + ord('A'))}{x + 1}."  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–º–∞—Ö–µ
            elif target_board[x][y] == SHIP_CELL:
                target_board[x][y] = HIT_CELL  # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ
                for ship in ships:
                    if (x, y) in ship.coordinates:
                        ship.hit_count += 1
                        if ship.is_sunk():
                            self.mark_surrounding_cells(target_board,
                                                        ship)  # –ü–æ–º–µ—á–∞–µ–º –∫–ª–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
                            return True, f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ—Ç–æ–ø–∏–ª –≤–∞—à –∫–æ—Ä–∞–±–ª—å –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö {chr(y + ord('A'))}{x + 1}!"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å–µ –∫–æ—Ä–∞–±–ª—è
                        else:
                            self.add_surrounding_shots(x, y)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏, –µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å —Ä–∞–Ω–µ–Ω
                            return True, f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Ä–∞–Ω–∏–ª –≤–∞—à –∫–æ—Ä–∞–±–ª—å –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö {chr(y + ord('A'))}{x + 1}!"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å–µ –∫–æ—Ä–∞–±–ª—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Ö–æ–¥–æ–≤
games = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@router.callback_query(F.data == 'game_sea')
async def cmd_start(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    game = SeaBattle()  # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    games[user_id] = game  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
    await state.set_state(GameStates.waiting_for_player_move_letter)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –±—É–∫–≤—ã
    await game.display_boards(callback.message)  # –í—ã–≤–æ–¥ –∏–≥—Ä–æ–≤—ã—Ö –¥–æ—Å–æ–∫
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞:", reply_markup=create_letter_keyboard())  # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞


def create_letter_keyboard():
    letters = "ABCDEFGHIJ"
    keyboard = [
        [InlineKeyboardButton(text=letters[i], callback_data=f"letter_{letters[i]}") for i in range(5)],
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        [InlineKeyboardButton(text=letters[i], callback_data=f"letter_{letters[i]}") for i in range(5, 10)]
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_number_keyboard():
    numbers = [str(i) for i in range(1, 11)]
    keyboard = [
        [InlineKeyboardButton(text=numbers[i], callback_data=f"number_{numbers[i]}") for i in range(5)],
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        [InlineKeyboardButton(text=numbers[i], callback_data=f"number_{numbers[i]}") for i in range(5, 10)]
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(GameStates.waiting_for_player_move_letter)
async def handle_letter_choice(query: CallbackQuery, state: FSMContext):
    letter = query.data.split("_")[1]
    await state.update_data(selected_letter=letter)
    await state.set_state(GameStates.waiting_for_player_move_number)
    await query.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞:", reply_markup=create_number_keyboard())
    await query.answer()


@router.callback_query(GameStates.waiting_for_player_move_number)
async def handle_number_choice(query: CallbackQuery, state: FSMContext):
    number = query.data.split("_")[1]
    await state.update_data(selected_number=number)
    user_data = await state.get_data()
    selected_letter = user_data.get("selected_letter")
    await state.set_state(GameStates.waiting_for_player_move_confirm)
    await query.message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –±—É–∫–≤–∞ {selected_letter} –∏ —Ü–∏—Ñ—Ä–∞ {number}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Å—Ç—Ä–µ–ª?",
                               reply_markup=create_confirmation_keyboard(selected_letter, number))
    await query.answer()


def create_confirmation_keyboard(letter, number):
    keyboard = [
        [
            InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{letter}{number}"),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_move")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(GameStates.waiting_for_player_move_confirm)
async def handle_confirmation(query: CallbackQuery, state: FSMContext):
    if query.data.startswith("confirm_"):
        move = query.data.split("_")[1]
        user_id = query.from_user.id
        game = games.get(user_id)
        if not game:
            await query.message.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        hit_result = True  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ü–∏–∫–ª–∞
        while hit_result:  # –ü–æ–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è
            shoot_result, shoot_message = game.shoot(game.enemy_board, game.enemy_ships, move, user_id)
            if shoot_result == "–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É.":
                await query.message.answer(shoot_message)
                await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞:", reply_markup=create_letter_keyboard())
                await state.set_state(GameStates.waiting_for_player_move_letter)
                return  # –í–∞–∂–Ω–æ! –í–æ–∑–≤—Ä–∞—â–∞–µ–º, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ü–∏–∫–ª–∞

            elif shoot_result:
                await query.message.answer(shoot_message)
                await game.display_boards(query.message)
                # –ï—Å–ª–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞:", reply_markup=create_letter_keyboard())
                await state.set_state(GameStates.waiting_for_player_move_letter)
                break;  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            else:
                await query.message.answer(shoot_message)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–º–∞—Ö
                await game.display_boards(query.message)
                hit_result = False  # –û–±–Ω–æ–≤–ª—è–µ–º hit_result

        if game.check_winner(game.enemy_ships):
            await query.message.answer("–í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
            await state.clear()
            return

        if not hit_result:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ö–æ–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            await state.set_state(GameStates.waiting_for_enemy_move)
            await enemy_turn(query.message, game, state)

    elif query.data == "cancel_move":
        await state.set_state(GameStates.waiting_for_player_move_letter)
        await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞:", reply_markup=create_letter_keyboard())
    await query.answer()


async def enemy_turn(message: Message, game: SeaBattle, state: FSMContext):
    hit_result = True  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º hit_result –≤ True –¥–ª—è —Ü–∏–∫–ª–∞ while
    while hit_result:  # —Ü–∏–∫–ª –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∫–∞ –µ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è
        hit_result, enemy_result = game.enemy_shoot(game.player_board, game.player_ships)
        if enemy_result:
            await message.answer(enemy_result)
            await game.display_boards(message)

        if game.check_winner(game.player_ships):
            await message.answer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
            await state.clear()
            return

        if not hit_result:
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–º–∞—Ö–∞

    if not game.check_winner(game.player_ships):
        await state.set_state(GameStates.waiting_for_player_move_letter)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞:", reply_markup=create_letter_keyboard())
